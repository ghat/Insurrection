AuthUserFile /home/subversion/authentication/passwords
AuthName "MKSoft Insurrection Repository"
AuthType Basic

## We want the index.cgi to handle the directory by default...
DirectoryIndex index.cgi

## Note that I list each file specifically such that
## there is less chance of running a CGI that was not
## placed here on purpose.  Also, there is nothing that
## requires that the CGI scripts end in ".cgi" - I
## am just doing that to make it easy to see where the
## CGIs are vs non-CGIs.  This is most noticeable in the
## CGIs that deal with log processing, etc.

## The main index file is generally available and will
## show only elements that are available without login.
<Files ~ "^index\.cgi$">
	SetHandler cgi-script
</Files>

## This is exactly the same as the index.cgi but it
## requires login and shows all elements that are
## available to that specific user.
<Files ~ "^auth_index\.cgi$">
	SetHandler cgi-script
	require valid-user
</Files>

<Files ~ "^password\.cgi$">
	SetHandler cgi-script
	require valid-user
</Files>

<Files ~ "^admin\.cgi$">
	SetHandler cgi-script
	require valid-user
</Files>

## This is a CGI just to fill in some information into
## the template.  It is only called from the index template
## and thus really is just a site-specific thing.  I
## use it to make the project page work for both
## the local test server and the public servers.
<Files ~ "^project\.cgi$">
	SetHandler cgi-script
</Files>

## These CGIs can be used without login depending on
## the repository being requested in the path extra
## and the access rights defined.  So, we default to
## letting anyone use these forms of the CGIs.  When
## the CGI notices an authentication requirement,
## it forces the use of the auth_* version below.
<Files ~ "^(blame|diff|get|log|rss)\.cgi$">
	SetHandler cgi-script
</Files>

## For some browsers, XSLT support is either not working
## correctly or not working at all.  What this CGI does
## is to generate the SVN Index base page as HTML and then
## let the browser and JavaScript via XMLHttp do the
## real work.  Note that this does not need to check
## authentication as no actual data shows up in the HTML
## but via the XMLHttp and those operations are fully
## authenticated.  This works in conjunction with the
## rewrite rule below that does the user agent checking.
<Files ~ "^broken_xslt\.cgi$">
	SetHandler cgi-script
</Files>

## You need to have mod-rewrite enabled in apache
RewriteEngine On
RewriteRule	^index.html$	/index.cgi	[R,L]
RewriteRule	^project.html$	/project.cgi	[R,L]

## We use a local proxy operation such that we can
## publicly expose only the normal Subversion paths
## with the only difference being CGI query strings.
## We also depend on the rewrites to provide the
## full path to the repository.  Thus, all of the
## ^svn/ bits would need to contain the prefix path
## from this directory into the base of the repositories.
## Note that we also require proxy support to
## make this work reasonably transparently.  A
## redirect would have worked but then would not get
## the benefit of the authentication from mod_authz_svn
## that was already done.  The CGIs try to notice this
## proxy behavior and when proxied to via this mechanism
## do not do their own authentication.
##
## Note that we only look at GET access methods.
## All other methods are reserver for mod_dav_svn.
##
## NOTE - Currently a bug in Apache/mod_rewrite
## has bugs with certain characters in the URL.
## http://issues.apache.org/bugzilla/show_bug.cgi?id=34602
##
## The rewrite/proxy we do here specifically tries to get
## around this problem by putting the URI into a CGI parameter
## and not the path_info and then doing some re-parsing with
## the understanding that the Path parameter is always the
## last parameter before the end of the URI.  Ugly but it works...
RewriteCond %{REQUEST_METHOD} GET
RewriteCond %{QUERY_STRING} Insurrection=(blame|diff|get|log|rss)
RewriteRule	^svn(/.*)$	"/%1.cgi?%{QUERY_STRING}&Path=$1"	[P,L]
#RewriteRule	^svn/(.*)$	"/%1.cgi/$1"	[P,L]

## What a trick - to get the broken browsers to work.
## Now the need XMLHttp, but the don't need the XSLT
## to work.
##
## Note that the XSLT of Safari is almost working but
## not quite.  So it is listed here.
##
## What we do here is proxy the request to a simple
## CGI the makes the base HTML framework and kicks off
## a client side script that does the rest.
##
## Note that if someone expressly wants XML, the
## XMLHttp=1 attribute is needed.  This is used by the
## XMLHttp object in the JavaScript to make sure that
## it does get the XML version even when the browser
## does not support XML/XSLT.
##
## Note that we would like to have the real XSLT working
## as there are some things that are not available
## without it *and* the bandwidth and server load are
## much lower.  The good thing is that the top two
## browser technologies do work correctly enough to
## not need this hack.  That ends up covering 98% of
## all wed users.  (That is Mozilla/Firefox and IE)
##
## Again, with the same hack to make this work the way I want...
RewriteCond %{REQUEST_METHOD} GET
RewriteCond %{QUERY_STRING} !XMLHttp=1
RewriteCond %{HTTP_USER_AGENT} Opera		[OR]
RewriteCond %{HTTP_USER_AGENT} Safari		[OR]
RewriteCond %{HTTP_USER_AGENT} Konqueror
RewriteRule	^svn(/.*/)$	"/broken_xslt.cgi?&Path=$1"	[P,L]
#RewriteRule	^svn/(.*/)$	"/broken_xslt.cgi/$1"	[P,L]

